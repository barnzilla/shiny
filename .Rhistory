x <- "https://ca.finance.yahoo.com/quote/cadusd=x"
webpage <- scrape_yahoo(x)
scraped_data <- html_text(html_nodes(webpage, "[id='quote-header-info']") %>% html_nodes("div"))[16]
price <- strsplit(scraped_data, "[+]|[-]")[[1]][1]
x <- "https://ca.finance.yahoo.com/quote/cadusd=x"
scrape_yahoo <- function(x) {
url <- suppressWarnings(tryCatch(
url(x, "rb"),
error = function(e) { NA }
))
if(is.na(url)) {
return(url)
} else {
webpage <- tryCatch(
read_html(url),
error = function(e) { "URL does not exist" }
)
close(url)
scraped_data <- html_text(html_nodes(webpage, "[id='quote-header-info']") %>% html_nodes("div"))[16]
price <- strsplit(scraped_data, "[+]|[-]")[[1]][1]
date_time <- paste0(strsplit(scraped_data, " ")[[1]][5:6], collapse = " ")
return(data.frame(date = date_time, price = price, stringsAsFactors = FALSE))
}
}
webpage <- scrape_yahoo(x)
scraped_data <- html_text(html_nodes(webpage, "[id='quote-header-info']") %>% html_nodes("div"))[16]
webpage
webpage$price
runApp('C:/Users/joelb/Desktop/Investment')
scrape_yahoo <- function(symbol, url, quantity, convert = FALSE) {
url <- suppressWarnings(tryCatch(
url(url, "rb"),
error = function(e) { NA }
))
if(is.na(url)) {
return(url)
} else {
webpage <- tryCatch(
read_html(url),
error = function(e) { "URL does not exist" }
)
close(url)
scraped_data <- html_text(html_nodes(webpage, "[id='quote-header-info']") %>% html_nodes("div"))[16]
price <- as.numeric(strsplit(scraped_data, "[+]|[-]")[[1]][1])
if(isTRUE(convert)) price <- price * cached$conversion
date_time <- paste0(strsplit(scraped_data, " ")[[1]][5:6], collapse = " ")
market_value <- format(round(price * as.integer(quantity), 2), nsmall = 2, big.mark = ",")
return(data.frame(Symbol = symbol, Date = date_time, Quantity = quantity, Price = paste0("$", price), "Market value" = paste0("$", market_value), stringsAsFactors = FALSE))
}
}
as.numeric(scrape_yahoo("CAD", "https://ca.finance.yahoo.com/quote/cadusd=x", 1)$price)
scrape_yahoo("CAD", "https://ca.finance.yahoo.com/quote/cadusd=x", 1)$price
scrape_yahoo("CAD", "https://ca.finance.yahoo.com/quote/cadusd=x", 1)
a = scrape_yahoo("CAD", "https://ca.finance.yahoo.com/quote/cadusd=x", 1)
a$Price
as.numeric(a$Price)
as.numeric(gsub("$", "", a$Price)
as.numeric(gsub("$", "", a$Price)
)
as.numeric(gsub("$", "", a$Price))
gsub("$", "", a$Price)
gsub("[$]", "", a$Price)
as.numeric(gsub("[$]", "", a$Price))
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
25000
total = 25000
a = c(25, 25, 19, 100)
b = sum(a)
a
b
table(a)
prop.table(table(a))
unname(prop.table(table(a)))
runApp('C:/Users/joelb/Desktop/Investment')
data.frame(a)
c = data.frame(a)
unname(c$a)
unname(prop.table(c$a))
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
install.packages("shinycssloaders")
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
sum(c(30.6, 4.9, 4.9, 29.4, 28.2))
sum(c(30.6, 4.9, 4.9, 29.4, 28.2)) / 100
sum(c(30.6, 4.9, 4.9, 29.4, 28.2)) * 98 / 100
30.6 * 100 / 98
c(30.6, 4.9, 4.9, 29.4, 28.2) * 98 / 100
sum(c(30.6, 4.9, 4.9, 29.4, 28.2) * 98 / 100)
sum(c(30.6, 4.9, 4.9, 29.4, 28.2) * 100 / 98)
c(30.6, 4.9, 4.9, 29.4, 28.2) * 100 / 98
30.6 * 0.01
optimal_allocations <- c(30.6, 4.9, 4.9, 29.4, 28.2) * 100 / sum(c(30.6, 4.9, 4.9, 29.4, 28.2)) * 0.01
optimal_allocations
800 * 1000
800 / 1000
0.5 - 0.8
0.5 * 100
floor(16.667)
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
a = 100
paste0("+", a)
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
c("Total", NA, NA, NA, paste0("$", total), paste0(sum(table$prop), "%"), NA)
c("Total", NA, NA, NA, paste0("$", 20000), paste0(sum(2, 3, 4), "%"), NA)
runApp('C:/Users/joelb/Desktop/Investment')
df <- data.frame(a = 1, b = 2, c = 3)
df
rbind(df, c(4, 5, 6))
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
c("Summary", rep(NA, 6))
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
df
df[1, 2:3] <- NA
df
runApp('C:/Users/joelb/Desktop/Investment')
?kable
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
?kable
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
data.frame(1:5)
df
rbind(df, c("", NA, NA))
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
library(kableExtra)
library(magrittr)
library(rvest)
scrape_yahoo <- function(symbol, url, quantity, convert = FALSE) {
url <- suppressWarnings(tryCatch(
url(url, "rb"),
error = function(e) { NA }
))
if(is.na(url)) {
return(url)
} else {
webpage <- tryCatch(
read_html(url),
error = function(e) { "URL does not exist" }
)
close(url)
scraped_data <- html_text(html_nodes(webpage, "[id='quote-header-info']") %>% html_nodes("div"))[16]
price <- as.numeric(strsplit(scraped_data, "[+]|[-]")[[1]][1])
if(isTRUE(convert)) price <- price * cached$conversion
date_time <- paste0(strsplit(scraped_data, " ")[[1]][5:6], collapse = " ")
market_value <- price * as.integer(quantity)
return(data.frame(Symbol = symbol, Date = date_time, Quantity = quantity, Price = price, market_value = market_value, stringsAsFactors = FALSE))
}
}
usd_to_cad <- scrape_yahoo("CAD", "https://ca.finance.yahoo.com/quote/cadusd=x", 1)
conversion <- as.numeric(gsub("[$]", "", usd_to_cad$Price))
conversion
dgrc_to <- scrape_yahoo("DGRC.TO", "https://ca.finance.yahoo.com/quote/dgrc.to", 693)
dgrc_to
reet <- scrape_yahoo("REET", "https://ca.finance.yahoo.com/quote/reet", 107, convert = TRUE)
scrape_yahoo <- function(symbol, url, quantity, convert = FALSE) {
url <- suppressWarnings(tryCatch(
url(url, "rb"),
error = function(e) { NA }
))
if(is.na(url)) {
return(url)
} else {
webpage <- tryCatch(
read_html(url),
error = function(e) { "URL does not exist" }
)
close(url)
scraped_data <- html_text(html_nodes(webpage, "[id='quote-header-info']") %>% html_nodes("div"))[16]
price <- as.numeric(strsplit(scraped_data, "[+]|[-]")[[1]][1])
if(isTRUE(convert)) price <- price * conversion
date_time <- paste0(strsplit(scraped_data, " ")[[1]][5:6], collapse = " ")
market_value <- price * as.integer(quantity)
return(data.frame(Symbol = symbol, Date = date_time, Quantity = quantity, Price = price, market_value = market_value, stringsAsFactors = FALSE))
}
}
reet <- scrape_yahoo("REET", "https://ca.finance.yahoo.com/quote/reet", 107, convert = TRUE)
spem <- scrape_yahoo("SPEM", "https://ca.finance.yahoo.com/quote/spem", 81, convert = TRUE)
sptm <- scrape_yahoo("SPTM", "https://ca.finance.yahoo.com/quote/sptm", 320, convert = TRUE)
xfh_to <- scrape_yahoo("XFH.TO", "https://ca.finance.yahoo.com/quote/xfh.to", 760)
out = rbind(dgrc_to, reet, spem, sptm, xfh_to)
str(out)
table <- out
table$prop <- custom_round(unname(prop.table(table$market_value)) * 100)
custom_round <- function(x, n = 2) {
return(format(round(as.numeric(x), n), nsmall = n, big.mark = ","))
}
table$prop <- custom_round(unname(prop.table(table$market_value)) * 100)
total_prop <- paste0(custom_round(sum(unname(prop.table(table$market_value)) * 100)), "%")
optimal_allocation <- c(30.6, 4.9, 4.9, 29.4, 28.2) * 100 / sum(c(30.6, 4.9, 4.9, 29.4, 28.2)) * 0.01
total <- sum(table$market_value) + input$cash
table$buy_sell <- sapply(table$prop, function(x) {
difference <- floor(((optimal_allocation * total) - table$market_value) / table$Price)
})
colnames(table)[4] <- paste0(colnames(table)[4], " (CAD)")
colnames(table)[5] <- "Market value (CAD)"
colnames(table)[6] <- "Portfolio allocation"
colnames(table)[7] <- "Buy/sell"
table[,4:5] <- apply(table[,4:5], 1:2, function(x) paste0("$", custom_round(x)))
str(table)
table$buy_sell <- unname(sapply(table$prop, function(x) {
difference <- floor(((optimal_allocation * total) - table$market_value) / table$Price)
}))
table <- out
table$prop <- custom_round(unname(prop.table(table$market_value)) * 100)
total_prop <- paste0(custom_round(sum(unname(prop.table(table$market_value)) * 100)), "%")
optimal_allocation <- c(30.6, 4.9, 4.9, 29.4, 28.2) * 100 / sum(c(30.6, 4.9, 4.9, 29.4, 28.2)) * 0.01
total <- sum(table$market_value) + input$cash
table$buy_sell <- unname(sapply(table$prop, function(x) {
difference <- floor(((optimal_allocation * total) - table$market_value) / table$Price)
}))
table <- out
table$prop <- custom_round(unname(prop.table(table$market_value)) * 100)
total_prop <- paste0(custom_round(sum(unname(prop.table(table$market_value)) * 100)), "%")
optimal_allocation <- c(30.6, 4.9, 4.9, 29.4, 28.2) * 100 / sum(c(30.6, 4.9, 4.9, 29.4, 28.2)) * 0.01
total <- sum(table$market_value) + 0
table$buy_sell <- unname(sapply(table$prop, function(x) {
difference <- floor(((optimal_allocation * total) - table$market_value) / table$Price)
}))
str(table)
colnames(table)[4] <- paste0(colnames(table)[4], " (CAD)")
colnames(table)[5] <- "Market value (CAD)"
colnames(table)[6] <- "Portfolio allocation"
colnames(table)[7] <- "Buy/sell"
table[,4:5] <- apply(table[,4:5], 1:2, function(x) paste0("$", custom_round(x)))
str(table)
table$buy_sell <- floor(((optimal_allocation * total) - table$market_value) / table$Price)
table <- out
table$prop <- custom_round(unname(prop.table(table$market_value)) * 100)
total_prop <- paste0(custom_round(sum(unname(prop.table(table$market_value)) * 100)), "%")
optimal_allocation <- c(30.6, 4.9, 4.9, 29.4, 28.2) * 100 / sum(c(30.6, 4.9, 4.9, 29.4, 28.2)) * 0.01
total <- sum(table$market_value) + 0
table$buy_sell <- floor(((optimal_allocation * total) - table$market_value) / table$Price)
str(table)
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
url <- "https://ca.finance.yahoo.com/quote/SPTM"
url <- suppressWarnings(tryCatch(
url(url, "rb"),
error = function(e) { NA }
))
URL
url
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
runApp('C:/Users/joelb/Desktop/Investment')
library(kableExtra)
library(magrittr)
library(rvest)
# Round numeric values and output as formatted values
custom_round <- function(x, n = 2) {
return(format(round(as.numeric(x), n), nsmall = n, big.mark = ","))
}
dgrc_to <- reet <- spem <- sptm <- xfh_to <- 0
# The function that scrapes prices and dates data from Yahoo
scrape_yahoo <- function(symbol, url, quantity, convert = FALSE) {
url <- suppressWarnings(tryCatch(
url(url, "rb"),
error = function(e) { NA }
))
if(is.na(url)) {
close(url)
return(data.frame(rep(NA, 5)))
} else {
webpage <- tryCatch(
read_html(url),
error = function(e) { "URL does not exist" }
)
close(url)
scraped_data <- html_text(html_nodes(webpage, "[id='quote-header-info']") %>% html_nodes("div"))[16]
price <- as.numeric(strsplit(scraped_data, "[+]|[-]")[[1]][1])
if(isTRUE(convert)) price <- price * conversion
date_time <- paste0(strsplit(scraped_data, " ")[[1]][5:6], collapse = " ")
market_value <- price * as.integer(quantity)
return(data.frame(Symbol = symbol, Date = date_time, Quantity = quantity, Price = price, market_value = market_value, stringsAsFactors = FALSE))
}
}
d <- scrape_data()
# The function that scrapes financial data for the Questrade ETF portfolio
scrape_data <- function() {
# Scrape data for the USD to CAD conversion rate
usd_to_cad <- scrape_yahoo("CAD", "https://ca.finance.yahoo.com/quote/cadusd=x", 1)
conversion <- as.numeric(gsub("[$]", "", usd_to_cad$Price))
# Scrape data for the ETFs in the Questrade ETF portfolio
dgrc_to <- scrape_yahoo("DGRC.TO", "https://ca.finance.yahoo.com/quote/DGRC.TO", dgrc_to)
reet <- scrape_yahoo("REET", "https://ca.finance.yahoo.com/quote/REET", reet, convert = TRUE)
spem <- scrape_yahoo("SPEM", "https://ca.finance.yahoo.com/quote/SPEM", spem, convert = TRUE)
sptm <- scrape_yahoo("SPTM", "https://ca.finance.yahoo.com/quote/SPTM", sptm, convert = TRUE)
xfh_to <- scrape_yahoo("XFH.TO", "https://ca.finance.yahoo.com/quote/XFH.TO", xfh_to)
# Return the results as a data frame
return(rbind(dgrc_to, reet, spem, sptm, xfh_to))
}
d <- scrape_data()
d
# The function that scrapes prices and dates data from Yahoo
scrape_yahoo <- function(symbol, url, quantity, convert = FALSE) {
url <- suppressWarnings(tryCatch(
url(url, "rb"),
error = function(e) { NA }
))
if(is.na(url)) {
close(url)
return(data.frame(rep(NA, 5)))
} else {
webpage <- tryCatch(
read_html(url),
error = function(e) { "URL does not exist" }
)
close(url)
scraped_data <- html_text(html_nodes(webpage, "[id='quote-header-info']") %>% html_nodes("div"))[16]
price <- as.numeric(strsplit(scraped_data, "[+]|[-]|[.]"))
price <- as.numeric(paste0(price[[1]][1]), ".", substr(price[[1]][2], 1, 2))
if(isTRUE(convert)) price <- price * conversion
date_time <- paste0(strsplit(scraped_data, " ")[[1]][5:6], collapse = " ")
market_value <- price * as.integer(quantity)
return(data.frame(Symbol = symbol, Date = date_time, Quantity = quantity, Price = price, market_value = market_value, stringsAsFactors = FALSE))
}
}
d <- scrape_data()
d
# The function that scrapes prices and dates data from Yahoo
scrape_yahoo <- function(symbol, url, quantity, convert = FALSE) {
url <- suppressWarnings(tryCatch(
url(url, "rb"),
error = function(e) { NA }
))
if(is.na(url)) {
close(url)
return(data.frame(rep(NA, 5)))
} else {
webpage <- tryCatch(
read_html(url),
error = function(e) { "URL does not exist" }
)
close(url)
scraped_data <- html_text(html_nodes(webpage, "[id='quote-header-info']") %>% html_nodes("div"))[16]
price <- strsplit(scraped_data, "[+]|[-]|[.]")
price <- as.numeric(paste0(price[[1]][1]), ".", substr(price[[1]][2], 1, 2))
if(isTRUE(convert)) price <- price * conversion
date_time <- paste0(strsplit(scraped_data, " ")[[1]][5:6], collapse = " ")
market_value <- price * as.integer(quantity)
return(data.frame(Symbol = symbol, Date = date_time, Quantity = quantity, Price = price, market_value = market_value, stringsAsFactors = FALSE))
}
}
d <- scrape_data()
d
# Scrape prices and dates from Yahoo
table <- scrape_data()
# Compute the portfolio allocations
table$prop <- custom_round(unname(prop.table(table$market_value)) * 100)
# Add the % symbol
total_prop <- paste0(custom_round(sum(unname(prop.table(table$market_value)) * 100)), "%")
# Define the optimal portfolio allocations (aggressive); see https://www.questrade.com/questwealth-portfolios/etf-portfolios
optimal_allocation <- c(30.6, 4.9, 4.9, 29.4, 28.2) * 100 / sum(c(30.6, 4.9, 4.9, 29.4, 28.2)) * 0.01
# Compute total equity (remove 3% from cash to account for CAD to USD conversion fees)
total <- sum(table$market_value) + (input$cash * 0.97)
# Compute total equity (remove 3% from cash to account for CAD to USD conversion fees)
total <- sum(table$market_value) + (0 * 0.97)
# Compute the buy/sell column
table$buy_sell <- floor(((optimal_allocation * total) - table$market_value) / table$Price)
table$buy_sell <- sapply(table$buy_sell, function(x) if(x > 0) paste0("+", x) else as.character(x))
# Add more semantic column names for select columns
colnames(table)[5] <- "Market value"
colnames(table)[6] <- "Portfolio allocation"
colnames(table)[7] <- "Buy(+)/sell(-)"
# Add formatting to select columns
table[4:5] <- apply(table[4:5], 1:2, function(x) paste0("$", custom_round(x), " CAD"))
table[6] <- sapply(table[6], function(x) paste0(x, "%"))
# Add rows for cash and for the summary
table <- rbind(table, c("Cash", rep("-", 3), paste0("$", input$cash, " CAD"), rep("-", 2)))
# Add rows for cash and for the summary
table <- rbind(table, c("Cash", rep("-", 3), paste0("$", cash, " CAD"), rep("-", 2)))
dgrc_to <- reet <- spem <- sptm <- xfh_to <- cash <- 0
# Add rows for cash and for the summary
table <- rbind(table, c("Cash", rep("-", 3), paste0("$", cash, " CAD"), rep("-", 2)))
table <- rbind(table, c("Summary", rep("-", 3), paste0("$", custom_round(total), " CAD"), total_prop, "-"))
# Output the results as an HTML table
kable(table, align = c("l", "l", "r", "r", "r", "r", "r"), row.names = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
row_spec(nrow(table), bold = T, color = "white", background = "#808080")
runApp('C:/Users/joelb/Desktop/Investment')
# The function that scrapes financial data for the Questrade ETF portfolio
scrape_data <- function() {
# Scrape data for the USD to CAD conversion rate
usd_to_cad <- scrape_yahoo("CAD", "https://ca.finance.yahoo.com/quote/cadusd=x", 1)
conversion <- as.numeric(gsub("[$]", "", usd_to_cad$Price))
# Scrape data for the ETFs in the Questrade ETF portfolio
dgrc_to <- scrape_yahoo("DGRC.TO", "https://ca.finance.yahoo.com/quote/DGRC.TO", dgrc_to)
reet <- scrape_yahoo("REET", "https://ca.finance.yahoo.com/quote/REET", reet, convert = TRUE)
spem <- scrape_yahoo("SPEM", "https://ca.finance.yahoo.com/quote/SPEM", spem, convert = TRUE)
sptm <- scrape_yahoo("SPTM", "https://ca.finance.yahoo.com/quote/SPTM", sptm, convert = TRUE)
xfh_to <- scrape_yahoo("XFH.TO", "https://ca.finance.yahoo.com/quote/XFH.TO", xfh_to)
# Return the results as a data frame
return(rbind(dgrc_to, reet, spem, sptm, xfh_to))
}
# The function that scrapes prices and dates data from Yahoo
scrape_yahoo <- function(symbol, url, quantity, convert = FALSE) {
url <- suppressWarnings(tryCatch(
url(url, "rb"),
error = function(e) { NA }
))
if(is.na(url)) {
close(url)
return(data.frame(rep(NA, 5)))
} else {
webpage <- tryCatch(
read_html(url),
error = function(e) { "URL does not exist" }
)
close(url)
scraped_data <- html_text(html_nodes(webpage, "[id='quote-header-info']") %>% html_nodes("div"))[16]
price <- strsplit(scraped_data, "[+]|[-]|[.]")
price <- as.numeric(paste0(price[[1]][1]), ".", as.integer(substr(price[[1]][2], 1, 2)))
if(isTRUE(convert)) price <- price * conversion
date_time <- paste0(strsplit(scraped_data, " ")[[1]][5:6], collapse = " ")
market_value <- price * as.integer(quantity)
return(data.frame(Symbol = symbol, Date = date_time, Quantity = quantity, Price = price, market_value = market_value, stringsAsFactors = FALSE))
}
}
# Scrape prices and dates from Yahoo
table <- scrape_data()
table
a <- c("28", "340")
str(paste0(a[1], ".", "a[2"))
str(paste0(a[1], ".", "a[2]"))
str(paste0(a[1], ".", a[2]))
str(as.numeric(paste0(a[1], ".", a[2])))
runApp('C:/Users/joelb/Desktop/Investment')
rm(list = ls())
package_names <- c("jsonlite", "kableExtra", "rvest")
load_packages <- lapply(package_names, require, character.only = TRUE)
get.data <- function(ticker, api) {
output <- fromJSON(paste0("https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=", ticker, "&interval=1min&outputsize=full&apikey=", api))
return(output)
}
api <- "YPG9IK6TJRAHFU9Z"
dgrc.to <- get.data("DGRC.TO", api)
dgrc.to
library(shiny)
?downloadHandler
Sys.Date()
Sys.time()
library(shiny); runApp('C:/Users/joelb/Google Drive/GitHub/shiny/questrade-etf-portfolio-rebalancer.R')
?local
local()
runApp('C:/Users/joelb/Google Drive/GitHub/shiny/questrade-etf-portfolio-rebalancer.R')
library(shiny); runApp('C:/Users/joelb/Google Drive/GitHub/shiny/questrade-etf-portfolio-rebalancer.R')
